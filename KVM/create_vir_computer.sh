#!/bin/bash
#
#	by wangdd 2016/06/22
#
#
#----------------------------------------------------------------
#KVM的安装
#virsh -c qemu:///system list 检测KVM安装结果
function install_kvm(){
	vir_tag=`egrep "(vmx|svm)" /proc/cpuinfo`
	if [[ -z "$vir_tag" ]]; then
		echo "This computer does not support for virtualization"
		exit
	else
		yum install -y kvm virt-manager libvirt bridge-utils device-mapper-libs >/dev/null 2>&1
		if [[ $? -eq 0 ]]; then
			service libvirtd start
			modprobe kvm
			modprobe kvm_intel
			modprobe kvm_amd
			if [[ -n `lsmod |grep kvm` ]]; then
				echo "KVM Install Seccuss"
			fi
		else
			echo "KVM Install Failed"
			exit
		fi
	fi
}
#----------------------------------------------------------------
#修改xml文件的函数,传入的参数$1--file.xml,$2---主机名,$3---UUID,$4---image_path,$5---iso_path
function modify_xml(){
		xml_file=$1
		computer_name=$2
		UUID=$3
		image_path=$4
		iso_path=$5
		sed -i "s,%HOSTNAME%,$computer_name,g" $xml_file
		sed -i "s,%UUID%,$UUID,g" $xml_file
		sed -i "s,%IMAGE_PATH%,$image_path,g" $xml_file
		sed -i "s,%ISO_PATH%,$iso_path,g" $xml_file
		MAC=fa:92:`dd if=/dev/urandom count=1 2>/dev/null | md5sum |sed 's/^\(..\)\(..\)\(..\)\(..\).*$/\1:\2:\3:\4/'`
		sed -i "s,%MAC%,$MAC,g" $xml_file
		MAC2=52:54:`dd if=/dev/urandom count=1 2>/dev/null | md5sum |sed "s/^\(..\)\(..\)\(..\)\(..\).*$/\1:\2:\3:\4/"`
		sed -i "s,%MAC2%,$MAC2,g" $xml_file
}

#----------------------------------------------------------------
#脚本创建虚拟机，需要安装操作系统
function create_vm(){
	xml_template="kvm_template.xml"
	computer_name="centos01"
	new_xml="centos-7.2.xml"
	new_disk="centos-7.2.raw"
	disk_size="30G"
	iso_path="/work/soft/kvm/centos-7.2.iso"
	image_path="/work/soft/kvm/centos-7.2.raw"
	UUID=`uuidgen`
	if [ ! -f "$new_xml" ];then
		cp $xml_template $new_xml
	else
		echo "$new_xml exsit"
		exit
	fi
	if [ ! -f "$new_disk" ];then
		qemu-img create -f raw $new_disk $disk_size
	else
		echo  "$new_disk exsit"
		exit
	fi
	tag=`cat $new_xml | grep '%UUID%'`
	if [ ! -z "$tag" ];then
		modify_xml "$new_xml" "$computer_name" "$UUID" "$image_path" "$iso_path"
		virsh define $new_xml >/dev/null
		virsh start $computer_name >/dev/null
		virsh vncdisplay $computer_name
	fi
}
#----------------------------------------------------------------------------
#利用已经安装好系统的raw磁盘，进行快速创建虚拟机复制image即可,主要过程浪费在复制磁盘上
#通过这种方式创建的虚拟机主机名相同、网络也是原来模板中
function create_vm_raw(){
	for i in `seq 10`
	do
		file=vm-$i.xml
		cp xml_template.xml $file
		name=vm${i}
		UUID=`uuidgen`
		cp -rf image_template.raw vm-${i}.raw
		image_path="/work/soft/kvm/vm-${i}.raw"
		iso_path="/work/soft/kvm/centos-7.2.iso"
		modify_xml "$file" "$name" "$UUID" "$image_path" "iso_path"
		if [[ $? -eq 0 ]]; then
			virsh define $file
			virsh start $name 
		fi
	done
}

#----------------------------------------------------------------------------
#批量快速创建虚拟机方案:
#利用qcow2结合raw格式为backing file进行批量快速创建虚拟机，同时解决主机名和MAC与模块中相同的问题
#要解决主机名和MAC的相同的问题只有先挂载模块的磁盘，修改相应的文件即可
#yum install kpartx,利用nbd 模块挂载qcow2文件

function base(){
	set -e #表示脚本运行出错就停止执行余下命令
	set -o xtrace #追踪脚本的执行过程
	tmp_dir=`mktemp` #生成临时目录用于挂载磁盘
	rm -rf $tmp_dir
	mkdir -p $tmp_dir
	TOPDIR=`cd $(dirname "$0") && pwd`
}

#MAC配置模板
function create_mac_file(){
	mac_temp=$TOPDIR/mac_temp
	cat << "EOF" >$mac_temp
	# This file was automatically generated by the /lib/udev/write_net_rules
# program, run by the persistent-net-generator.rules rules file.
#
# You can modify it, as long as you keep each rule on a single
# line, and change only the value of the NAME= key.

# PCI device 0x14e4:0x1639 (bnx2)
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="%MAC%", ATTR{type}=="1", KERNEL=="eth*", NAME="eth0"

# PCI device 0x14e4:0x1639 (bnx2)
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="%MAC2%", ATTR{type}=="1", KERNEL=="eth*", NAME="eth1"
EOF
}

#IP配置模板
function create_net_file(){
	net_temp=$TOPDIR/net_temp
	cat << "EOF" >$net_temp
	auto lo
	iface lo inet loopback

	auto eth0
	iface eth0 inet dhcp
	auto eth1
	iface eth1 inet static
	address 192.168.1.%IP%
	netmask 255.255.255.0
	broadcast 192.168.1.1
	gateway 192.168.1.1
EOF
}

#挂载/卸载qcow2文件

function mount_qcow2_disk(){
	#挂载qcow2文件,需要传入一个参数:qcow2文件名
	modprobe nbd max_part=63
	qemu-nbd -c /dev/nbd0 $TOPDIR/xxxxx.qcow2 #将qcow2文件挂载到/dev/nbd0
	sleep 1
	kpartx -a /dev/nbd0 #处理/dev/nbd0下的分区
	sleep 1
	mount /dev/mapper/nbd0p1 $tmp_dir #挂载根目录，根目录需要根据具体的情况进行调整
}

function umount_qcow2_disk(){
	umount $tmp_dir
	qemu-nbd -d /dev/nbd0
	for n in `ls /dev/mapper|grep -v control | grep -v nbd`
	do
		dmsetup clear /dev/mapper/$n #清除挂载过的nbd设备
		dmsetup remove /dev/mapper/$n
	done
	for n in `ls /dev/mapper | grep -v control | sort -r`
	do
		dmsetup clear /dev/mapper/$n
		dmsetup remove /dev/mapper/$n
	done

	rmmod nbd
}

#创建及修改虚拟磁盘
function create_image(){
	#需要传入3个参数:IP地址、MAC、MAC2
	ip=$1
	mac=$2
	mac2=$3
	hostname=vm-${ip}
	qemu-img create -f qcow2 -o cluster_size=2M,backing_file=$TOPDIR/linxu-template.raw $hostname.qcow2 40GB
	mount_qcow2_disk $hostname.qcow2
	mac_file=$tmp_dir/etc/udev/rules.d/70-persistent-net.rules
	net_file=$tmp_dir/etc/network/interfaces
	cp -rf $TOPDIR/mac_temp $mac_file
	cp -rf $TOPDIR/net_temp $net_file
	sed -i "s,%MAC%",$mac,g" $mac_file
	sed -i "s,%MAC2%",$mac,g" $mac_file
	sed -i "s,%IP%,$ip,g" $net_file
	sed -i "s,127.0.0.1.*,127.0.0.1 $hostname,g" $tmp_dir/etc/hosts
	echo "$hostname" >$tmp_dir/etc/hostname
	umount_qcow2_disk
}

#创建和修改xml文件
function create_xml(){
	ip=$1
	xml_file=vm-${ip}.xml
	cp -rf $TOPDIR/xml_template $xml_file
	hostname=vm-${ip}
	UUID=`uuidgen`

	sed -i "s,%HOSTNAME%,$computer_name,g" $xml_file
	sed -i "s,%UUID%,$UUID,g" $xml_file
	sed -i "s,%ISO_PATH%,$iso_path,g" $xml_file #模板中可以去掉ISO的配置
	MAC=fa:92:`dd if=/dev/urandom count=1 2>/dev/null | md5sum |sed 's/^\(..\)\(..\)\(..\)\(..\).*$/\1:\2:\3:\4/'`
	sed -i "s,%MAC%,$MAC,g" $xml_file
	MAC2=52:54:`dd if=/dev/urandom count=1 2>/dev/null | md5sum |sed "s/^\(..\)\(..\)\(..\)\(..\).*$/\1:\2:\3:\4/"`
	sed -i "s,%MAC2%,$MAC2,g" $xml_file
	create_image "$ip" "$MAC" "$MAC2"
	image_path=$TOPDIR/vm-${ip}.qcow2
	sed -i "s,%IMAGE_PATH%,$image_path,g" $xml_file
}

#创建虚拟机
function main_create_vm(){
	create_mac_file
	create_net_file
	for i in 233 235 180
	do
		create_xml $i
		virsh define vm-${i}.xml
		virsh start vm_${i}
	done
}
#总结:批量创建虚拟机的脚本完成，实际的情况还要对脚本进行必要的修改，此处指示提供了处理逻辑
#----------------------------------------------------------------------------
#virsh 主要命令
#	1.virsh create xxx.xml 创建虚拟机，建立好直接进入了运行状态；virsh shutdown linux 此方式创建的虚拟机关机后会直接被删除
#	2.virsh define xxx.xml 定义但不启动虚拟机
#	3.virsh destroy 虚拟机名 强制关闭虚拟机
#	4.virsh dumpxml 虚拟机名 获得虚拟机的配置信息
#	5.virsh edit 虚拟机名 在线编辑虚拟机的配置文件
#	6.virsh reboot/shutdown/start/undefine 虚拟机名 重启/关闭/启动/删除 
#	7.virsh vncdisplay 虚拟机名 显示虚拟机的vnc端口号
#磁盘快照管理
#磁盘快照:镜像快照和指针型快照
#1.创建
#	qemu-img snapshot -c 快照名 路径
#2.查看
#	qemu-img snapshot -l 路径
#3.还原快照
#	qemu-img -a 快照名 linux.qcow2
#4.删除
#	qemu-img -d 快照名 路径